using Core.Interfaces;
using Core.Interfaces.Data;
using Infrastructure.Helpers;

namespace Infrastructure.Factories;


/// <summary>
/// This Summary was Generated by Phind AI
/// Base factory class for converting between domain models and Entity Framework Core entities.
/// Leverages reflection to automatically map properties with matching names and types.
/// </summary>
/// <typeparam name="TDomain">The domain model type (from Core/Domain layer)</typeparam>
/// <typeparam name="TEntity">The Entity Framework Core entity type (from Infrastructure layer)</typeparam>
/// <remarks>
/// This implementation:
/// 1. Serves as the foundation for entity-domain conversions
/// 2. Uses <see cref="PropertyReflectionHelper"/> for property copying
/// 3. Follows the interface contract defined by <see cref="IEntityFactory{TDomain,TEntity}"/>
/// 4. Designed for extension - override methods for custom mapping logic
/// </remarks>
/// <example>
/// Basic usage:
/// <code>
/// var factory = new EntityFactoryBase&lt;Status, StatusEntity&gt;();
/// var domainEntity = factory.ToDomain(dbEntity);
/// </code>
///
/// Custom implementation:
/// <code>
/// public class CustomFactory: EntityFactoryBase&lt;CustomDomain, CustomEntity&gt;
/// {
///     public override CustomDomain ToDomain(CustomEntity entity) {
///         // Custom mapping logic
///     }
/// }
/// </code>
/// </example>
public class EntityFactoryBase<TDomain, TEntity> : IEntityFactory<TDomain, TEntity>
    where TDomain : class
    where TEntity : class
{
    /// <summary>
    /// Converts an Entity Framework Core entity to a domain model.
    /// </summary>
    /// <param name="entity"></param>
    /// <returns></returns>
    public virtual TDomain ToDomain(TEntity entity) =>
        PropertyReflectionHelper.CopyProperties<TDomain, TEntity>(entity);

    /// <summary>
    /// Converts a domain model to an Entity Framework Core entity.
    /// </summary>
    /// <param name="domain"></param>
    /// <returns></returns>
    public virtual TEntity ToEntity(TDomain domain) =>
        PropertyReflectionHelper.CopyProperties<TEntity, TDomain>(domain);
}
