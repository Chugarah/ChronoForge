using Core.DTOs.ServicesContracts;
using Core.Interfaces.DTos;
using Domain;

namespace Core.Factories;

public class ServiceContractsServiceDtoFactory : IServiceContractsServiceDtoFactory
{
    /// <summary>
    ///  Creating from Domain object to Create a DTO object
    /// </summary>
    /// <param name="serviceContractsInsertDto"></param>
    /// <returns></returns>
    public ServiceContracts? ToDomainServiceContractsInsert(
        ServiceContractsInsertDto serviceContractsInsertDto
    )
    {
        var serviceContracts = new ServiceContracts
        {
            CustomerId = serviceContractsInsertDto.CustomerId,
            PaymentTypeId = serviceContractsInsertDto.PaymentTypeId,
            Name = serviceContractsInsertDto.Name,
            Price = serviceContractsInsertDto.Price,
        };
        return serviceContracts;
    }

    /// <summary>
    /// Creating from Domain object to Update a DTO object
    /// </summary>
    /// <param name="serviceContractsUpdateDto"></param>
    /// <returns></returns>
    public ServiceContracts? ToDomainServiceContractsUpdate(
        ServiceContractsUpdateDto serviceContractsUpdateDto
    )
    {
        var serviceContracts = new ServiceContracts
        {
            CustomerId = serviceContractsUpdateDto.CustomerId,
            PaymentTypeId = serviceContractsUpdateDto.PaymentTypeId,
            Name = serviceContractsUpdateDto.Name,
            Price = serviceContractsUpdateDto.Price,
        };
        return serviceContracts;
    }

    /// <summary>
    /// Creating from Domain object to Display a DTO object
    /// </summary>
    /// <param name="serviceContracts"></param>
    /// <returns></returns>
    public ServiceContractsShowDto? ToDtoServiceContractDisplay(ServiceContracts? serviceContracts)
    {
        var serviceContractsShowDto = new ServiceContractsShowDto
        {
            Id = serviceContracts!.Id,
            CustomerId = serviceContracts.CustomerId,
            PaymentTypeId = serviceContracts.PaymentTypeId,
            Name = serviceContracts.Name,
            Price = serviceContracts.Price,
        };
        return serviceContractsShowDto;
    }

    /// <summary>
    /// Summary Generated by Ai Phind and AI helped me to refactor the code using AddRange
    /// Converts a collection of ServiceContracts entities to ServiceContractsShowDto objects
    /// </summary>
    /// <param name="serviceContracts">Collection of service contracts to convert. Can be null.</param>
    /// <returns>
    /// A collection of ServiceContractsShowDto objects representing the service contracts.
    /// Returns null if input is null.
    /// </returns>
    /// <remarks>
    /// Uses AddRange for efficient bulk addition of items to the list.
    /// The method performs a direct mapping of properties from entity to DTO.
    /// </remarks>
    /// <example>
    /// <code>
    /// var dtos = ToDtoServiceContractDisplay(serviceContracts);
    /// foreach(var dto in dtos)
    /// {
    ///     Console.WriteLine($"Contract: {dto.Name}");
    /// }
    /// </code>
    /// </example>
    public IEnumerable<ServiceContractsShowDto>? ToDtoServiceContractDisplay(
        IEnumerable<ServiceContracts?> serviceContracts)
    {
        // Create a list of ServiceContractsShowDto
        var serviceContractsShowDTos = new List<ServiceContractsShowDto>();
        // Add each ServiceContract to the list
        serviceContractsShowDTos.AddRange(
            serviceContracts!.Select(serviceContract => new ServiceContractsShowDto
            {
                Id = serviceContract!.Id,
                CustomerId = serviceContract.CustomerId,
                PaymentTypeId = serviceContract.PaymentTypeId,
                Name = serviceContract.Name,
                Price = serviceContract.Price,
            })
        );
        return serviceContractsShowDTos;
    }
}
